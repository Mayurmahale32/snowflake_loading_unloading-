--policy of creating integration with snowflake 

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:GetObjectVersion",
                "s3:DeleteObject",
                "s3:DeleteObjectVersion"
            ],
            "Resource": "arn:aws:s3:::healthcare-bucket-12/data/*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation"
            ],
            "Resource": "arn:aws:s3:::healthcare-bucket-12",
            "Condition": {
                "StringLike": {
                    "s3:prefix": [
                        "data/*"
                    ]
                }
            }
        }
    ]
}


------trust relationship of s3 with snowflake 

{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "",
			"Effect": "Allow",
			"Principal": {
				"AWS": "arn:aws:iam::026090546457:user/ih6q0000-s"
			},
			"Action": "sts:AssumeRole",
			"Condition": {
				"StringEquals": {
					"sts:ExternalId": "UU77087_SFCRole=2_Q9jxNR8LJPGOA2plgg0WSLyVIZc="
				}
			}
		}
	]
}



----------
create database health_food;
create schema health_analysis;

CREATE OR REPLACE STORAGE INTEGRATION s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::930245986673:role/s3_role_aws_int'
STORAGE_ALLOWED_LOCATIONS = ('s3://healthcare-bucket-12/data/'); 

DESCRIBE STORAGE INTEGRATION s3_int;

CREATE OR REPLACE STAGE external_stage 
STORAGE_INTEGRATION = s3_int
URL = s3://healthcare-bucket-12/data/;

SHOW STAGES;

CREATE OR REPLACE FILE FORMAT csv_file_format 
TYPE = 'CSV'
FIELD_OPTIONALLY_ENCLOSED_BY = '"'
SKIP_HEADER = 1
FIELD_DELIMITER =','
NULL_IF =('NULL', 'null','');

SHOW FILE FORMATS;

LIST @external_stage;

CREATE TABLE raw_data (
name VARCHAR ,
inspection_result VARCHAR,
inspection_closed_business BOOLEAN,
violation_type VARCHAR,
violation_points INT
);

SELECT * FROM raw_data;

SELECT $2 FROM @external_stage;

SELECT $2,$3 FROM @external_stage;

SELECT COUNT($2) FROM @external_stage;

COPY INTO raw_data 
FROM @external_stage 
FILE_FORMAT = (FORMAT_NAME = 'csv_file_format');

SELECT * FROM raw_data LIMIT 100 ;

SELECT COUNT (name) FROM raw_data;

LIST @external_stage;

SELECT * FROM raw_data;

SELECT name , count(*) AS total_red_violations
    FROM raw_data 
    WHERE VIOLATION_TYPE = 'RED'
    GROUP BY name 
    ORDER BY total_red_violations DESC;

CREATE TEMPORARY TABLE IF NOT EXISTS distilled_data_red_violations (
    restaurant_name VARCHAR,
    total_red_violations INT 
);

SHOW TABLES LIKE 'distilled_data_red_violations';

INSERT INTO distilled_data_red_violations (restaurant_name,total_red_violations )
SELECT name , count(*) AS total_red_violations
    FROM raw_data 
    WHERE VIOLATION_TYPE = 'RED'
    GROUP BY name 
    ORDER BY total_red_violations DESC;

SELECT * FROM distilled_data_red_violations;

COPY INTO @external_stage/dis_data2024
FROM HEALTH_FOOD.HEALTH_ANALYSIS.DISTILLED_DATA_RED_VIOLATIONS;


 
SHOW USERS;

CREATE WAREHOUSE WH;

GRANT OWNERSHIP ON WAREHOUSE WH TO role role ``;

CREATE USER MM
PASSWORD = 'P@ssw0rd'
LOGIN_NAME = panda ;

create role role;












